Nas = "Diamond Enchant"
do  local ui =  game:GetService("CoreGui"):FindFirstChild(Nas)  if ui then ui:Destroy() end end

local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local LocalPlayer = game:GetService("Players").LocalPlayer
local Mouse = LocalPlayer:GetMouse()
getgenv().Settings = {
    Key = Enum.KeyCode.RightControl,
    Color = Color3.fromRGB(1, 221, 255)
}

local function MakeDraggable(topbarobject, object)
    local Dragging = nil
    local DragInput = nil	
    local DragStart = nil
    local StartPosition = nil

    local function Update(input)
        local Delta = input.Position - DragStart
        local pos =
            UDim2.new(
                StartPosition.X.Scale,
                StartPosition.X.Offset + Delta.X,
                StartPosition.Y.Scale,
                StartPosition.Y.Offset + Delta.Y
            )
        local Tween = TweenService:Create(object, TweenInfo.new(0.2), {Position = pos})
        Tween:Play()
    end

    topbarobject.InputBegan:Connect(
        function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                Dragging = true
                DragStart = input.Position
                StartPosition = object.Position

                input.Changed:Connect(
                    function()
                        if input.UserInputState == Enum.UserInputState.End then
                            Dragging = false
                        end
                    end
                )
            end
        end
    )

    topbarobject.InputChanged:Connect(
        function(input)
            if
                input.UserInputType == Enum.UserInputType.MouseMovement or
                input.UserInputType == Enum.UserInputType.Touch
            then
                DragInput = input
            end
        end
    )

    UserInputService.InputChanged:Connect(
        function(input)
            if input == DragInput and Dragging then
                Update(input)
            end
        end
    )
end

local function tablefound(ta, object)
    for i,v in pairs(ta) do
        if v == object then
            return true
        end
    end
    return false
end


local function Tween(instance, properties,style,wa)
    if style == nil or "" then
        return Back
    end
    tween:Create(instance,TweenInfo.new(wa,Enum.EasingStyle[style]),{properties}):Play()
end

local ActualTypes = {
    RoundFrame = "ImageLabel",
    Shadow = "ImageLabel",
    Circle = "ImageLabel",
    CircleButton = "ImageButton",
    Frame = "Frame",
    Label = "TextLabel",
    Button = "TextButton",
    SmoothButton = "ImageButton",
    Box = "TextBox",
    ScrollingFrame = "ScrollingFrame",
    Menu = "ImageButton",
    NavBar = "ImageButton"
}

local Properties = {
    RoundFrame = {
        BackgroundTransparency = 1,
        Image = "http://www.roblox.com/asset/?id=5554237731",
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(3,3,297,297)
    },
    SmoothButton = {
        AutoButtonColor = false,
        BackgroundTransparency = 1,
        Image = "http://www.roblox.com/asset/?id=5554237731",
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(3,3,297,297)
    },
    Shadow = {
        Name = "Shadow",
        BackgroundTransparency = 1,
        Image = "http://www.roblox.com/asset/?id=5554236805",
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(23,23,277,277),
        Size = UDim2.fromScale(1,1) + UDim2.fromOffset(30,30),
        Position = UDim2.fromOffset(-15,-15)
    },
    Circle = {
        BackgroundTransparency = 1,
        Image = "http://www.roblox.com/asset/?id=5554831670"
    },
    CircleButton = {
        BackgroundTransparency = 1,
        AutoButtonColor = false,
        Image = "http://www.roblox.com/asset/?id=5554831670"
    },
    Frame = {
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Size = UDim2.fromScale(1,1)
    },
    Label = {
        BackgroundTransparency = 1,
        Position = UDim2.fromOffset(5,0),
        Size = UDim2.fromScale(1,1) - UDim2.fromOffset(5,0),
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left
    },
    Button = {
        BackgroundTransparency = 1,
        Position = UDim2.fromOffset(5,0),
        Size = UDim2.fromScale(1,1) - UDim2.fromOffset(5,0),
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left
    },
    Box = {
        BackgroundTransparency = 1,
        Position = UDim2.fromOffset(5,0),
        Size = UDim2.fromScale(1,1) - UDim2.fromOffset(5,0),
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left
    },
    ScrollingFrame = {
        BackgroundTransparency = 1,
        ScrollBarThickness = 0,
        CanvasSize = UDim2.fromScale(0,0),
        Size = UDim2.fromScale(1,1)
    },
    Menu = {
        Name = "More",
        AutoButtonColor = false,
        BackgroundTransparency = 1,
        Image = "http://www.roblox.com/asset/?id=5555108481",
        Size = UDim2.fromOffset(20,20),
        Position = UDim2.fromScale(1,0.5) - UDim2.fromOffset(25,10)
    },
    NavBar = {
        Name = "SheetToggle",
        Image = "http://www.roblox.com/asset/?id=5576439039",
        BackgroundTransparency = 1,
        Size = UDim2.fromOffset(20,20),
        Position = UDim2.fromOffset(5,5),
        AutoButtonColor = false
    }
}

local Types = {
    "RoundFrame",
    "Shadow",
    "Circle",
    "CircleButton",
    "Frame",
    "Label",
    "Button",
    "SmoothButton",
    "Box",
    "ScrollingFrame",
    "Menu",
    "NavBar"
}

function FindType(String)
    for _, Type in next, Types do
        if Type:sub(1, #String):lower() == String:lower() then
            return Type
        end
    end
    return false
end

local Objects = {}

function Objects.new(Type)
    local TargetType = FindType(Type)
    if TargetType then
        local NewImage = Instance.new(ActualTypes[TargetType])
        if Properties[TargetType] then
            for Property, Value in next, Properties[TargetType] do
                NewImage[Property] = Value
            end
        end
        return NewImage
    else
        return Instance.new(Type)
    end
end

local function GetXY(GuiObject)
    local Max, May = GuiObject.AbsoluteSize.X, GuiObject.AbsoluteSize.Y
    local Px, Py = math.clamp(Mouse.X - GuiObject.AbsolutePosition.X, 0, Max), math.clamp(Mouse.Y - GuiObject.AbsolutePosition.Y, 0, May)
    return Px/Max, Py/May
end

local function CircleAnim(GuiObject, EndColour, StartColour)
    local PX, PY = GetXY(GuiObject)
    local Circle = Objects.new("Circle")
    Circle.Size = UDim2.fromScale(0,0)
    Circle.Position = UDim2.fromScale(PX,PY)
    Circle.ImageColor3 = StartColour or GuiObject.ImageColor3
    Circle.ZIndex = 200
    Circle.Parent = GuiObject
    local Size = GuiObject.AbsoluteSize.X
    TweenService:Create(Circle, TweenInfo.new(0.5), {Position = UDim2.fromScale(PX,PY) - UDim2.fromOffset(Size/2,Size/2), ImageTransparency = 1, ImageColor3 = EndColour, Size = UDim2.fromOffset(Size,Size)}):Play()
    spawn(function()
        wait(0.5)
        Circle:Destroy()
    end)
end
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local LocalPlayer = game:GetService("Players").LocalPlayer
local Mouse = LocalPlayer:GetMouse()

local Lib = Instance.new("ScreenGui")

Lib.Name = Nas
Lib.Parent = game:GetService("CoreGui")
Lib.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

local Library = {}

local function tablefound(ta, object)
    for i,v in pairs(ta) do
        if v == object then
            return true
        end
    end
    return false
end

function Library.Window(text,des)

    local FocusUI = false

    local PageOrders = -1

    local Main = Instance.new("Frame")
    local MainUICorner = Instance.new("UICorner")
    local Topbar = Instance.new("Frame")

    local NameHub = Instance.new("TextLabel")
    local Description = Instance.new("TextLabel")
    local Scrollbar = Instance.new("Frame")
    local ScrollbarUICorner = Instance.new("UICorner")
    local Mainn = Instance.new("Frame")
    local MainnUICorner = Instance.new("UICorner")
    local ContainerPage = Instance.new("Frame")
    local FolderPage = Instance.new("Folder")
    local FolderUIPageLayout = Instance.new("UIPageLayout")

    local KeyBindUi = Instance.new("TextButton")

    KeyBindUi.Name = "KeyBindUi"
    KeyBindUi.Parent = Main
    KeyBindUi.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    KeyBindUi.BackgroundTransparency = 1.000
    KeyBindUi.Position = UDim2.new(0.796176474, 0, 0.0122137405, 0)
    KeyBindUi.Size = UDim2.new(0, 94, 0, 23)
    KeyBindUi.Font = Enum.Font.GothamMedium
    KeyBindUi.Text = "[ Right Control ]"
    KeyBindUi.TextColor3 = Color3.fromRGB(255, 255, 255)
    KeyBindUi.TextSize = 12.000
    KeyBindUi.TextTransparency = 0.500
    KeyBindUi.TextXAlignment = Enum.TextXAlignment.Right
    KeyBindUi.TextWrapped = true

    Main.Name = "Main"
    Main.Parent = Lib
    Main.BackgroundColor3 = Color3.fromRGB(33, 33, 33)
    Main.BorderSizePixel = 0
    Main.AnchorPoint = Vector2.new(0.5,0.5)
    Main.Position = UDim2.new(0.5, 0, 0.5, 0)
    Main.Size = UDim2.new(0, 0, 0, 0)
    Main.ClipsDescendants = true
    
    TweenService:Create(Main,TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),{Size = UDim2.new(0, 544, 0,  525)}):Play()

    MainUICorner.CornerRadius = UDim.new(0, 4)
    MainUICorner.Name = "MainUICorner"
    MainUICorner.Parent = Main

    KeyBindUi.MouseButton1Click:Connect(function()
        KeyBindUi.Text = "[ Select Key ]"
        local inputwait = UserInputService.InputBegan:wait()
        if inputwait.KeyCode.Name ~= "Unknown" then
            getgenv().Settings.Key = inputwait.KeyCode
            KeyBindUi.Text = "[ " .. getgenv().Settings.Key.Name .." ] "

            Key = inputwait.KeyCode.Name
        end
    end)
    local uitoggled = false
    UserInputService.InputBegan:Connect(function(io, p)
        if io.KeyCode == getgenv().Settings.Key then
            if uitoggled == false then
                uitoggled = true
                TweenService:Create(
                    Main,
                    TweenInfo.new(.5, Enum.EasingStyle.Quart, Enum.EasingDirection.In),
                    {Size = UDim2.new(0, 0, 0, 0)}
                ):Play()
            else
                TweenService:Create(
                    Main,
                    TweenInfo.new(.5, Enum.EasingStyle.Quart, Enum.EasingDirection.Out),
                    {Size = UDim2.new(0, 544, 0,  525)}
                ):Play()
                repeat wait() until Main.Size == UDim2.new(0, 544, 0,  525)
                uitoggled = false
            end
        end
    end)

    Topbar.Name = "Topbar"
    Topbar.Parent = Main
    Topbar.Active = true
    Topbar.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Topbar.BackgroundTransparency = 1.000
    Topbar.Size = UDim2.new(0, 544, 0, 48)

    NameHub.Name = "NameHub"
    NameHub.Parent = Topbar
    NameHub.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    NameHub.BackgroundTransparency = 1.000
    NameHub.Position = UDim2.new(0.1, 0, 0, 0)
    NameHub.Size = UDim2.new(0, 483, 0, 31)
    NameHub.Font = Enum.Font.GothamMedium
    NameHub.Text = tostring(text)
    NameHub.TextColor3 = Color3.fromRGB(255, 255, 255)
    NameHub.TextSize = 14.000
    NameHub.TextWrapped = true
    NameHub.TextXAlignment = Enum.TextXAlignment.Left

    local Dimonad_GOD = Instance.new("ImageLabel")

    Dimonad_GOD.Parent = Topbar
    Dimonad_GOD.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Dimonad_GOD.BackgroundTransparency = 1.000
    Dimonad_GOD.Position = UDim2.new(0.02, 0, 0.05, 0)
    Dimonad_GOD.Size = UDim2.new(0, 40, 0, 40)
    Dimonad_GOD.Image = "rbxassetid://11175832874"

    Description.Name = "Description"
    Description.Parent = Topbar
    Description.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Description.BackgroundTransparency = 1.000
    Description.Position = UDim2.new(0.1, 0, 0, 0)
    Description.Size = UDim2.new(0, 483, 0, 67)
    Description.Font = Enum.Font.GothamMedium
    Description.Text = des
    Description.TextColor3 = Color3.fromRGB(255, 255, 255)
    Description.TextSize = 12.000
    Description.TextTransparency = 0.500
    Description.TextWrapped = true
    Description.TextXAlignment = Enum.TextXAlignment.Left


    Scrollbar.Name = "Scrollbar"
    Scrollbar.Parent = Main
    Scrollbar.Active = true
    Scrollbar.AnchorPoint = Vector2.new(0.5, 0.5)
    Scrollbar.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    Scrollbar.BorderColor3 = Color3.fromRGB(27, 42, 53)
    Scrollbar.BorderSizePixel = 0
    Scrollbar.Position = UDim2.new(0.5, 0, 0.110076346, 0)
    Scrollbar.Size = UDim2.new(0, 520, 0, 35)

    ScrollbarUICorner.CornerRadius = UDim.new(0, 4)
    ScrollbarUICorner.Name = "ScrollbarUICorner"
    ScrollbarUICorner.Parent = Scrollbar

    Mainn.Name = "Mainn"
    Mainn.Parent = Main
    Mainn.BackgroundColor3 = Color3.fromRGB(27, 27, 27)
    Mainn.BorderSizePixel = 0
    Mainn.Position = UDim2.new(0.0202205889, 0, 0.151145041, 0)
    Mainn.Size = UDim2.new(0, 520, 0, 435)

    local MainnUICorner = Instance.new("UICorner")

    MainnUICorner.CornerRadius = UDim.new(0, 4)
    MainnUICorner.Parent = Mainn

    ContainerPage.Name = "ContainerPage"
    ContainerPage.Parent = Mainn
    ContainerPage.Active = true
    ContainerPage.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    ContainerPage.BackgroundTransparency = 1.000
    ContainerPage.ClipsDescendants = true
    ContainerPage.Size = UDim2.new(0, 520, 0, 435)

    FolderPage.Name = "FolderPage"
    FolderPage.Parent = ContainerPage

    FolderUIPageLayout.Name = "FolderUIPageLayout"
    FolderUIPageLayout.Parent = FolderPage
    FolderUIPageLayout.SortOrder = Enum.SortOrder.LayoutOrder
    FolderUIPageLayout.EasingDirection = Enum.EasingDirection.InOut
    FolderUIPageLayout.EasingStyle = Enum.EasingStyle.Quad
    FolderUIPageLayout.Padding = UDim.new(0, 10)
    FolderUIPageLayout.TweenTime = 0.300

    MakeDraggable(Topbar,Main)

    local Scrollingbar = Instance.new("ScrollingFrame")
    local ScrollingbarUIListLayout = Instance.new("UIListLayout")
    local ScrollingbarUIPadding = Instance.new("UIPadding")

    Scrollingbar.Name = "Scrollingbar"
    Scrollingbar.Parent = Scrollbar
    Scrollingbar.Active = true
    Scrollingbar.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Scrollingbar.BackgroundTransparency = 1.000
    Scrollingbar.BorderSizePixel = 0
    Scrollingbar.Size = UDim2.new(0, 520, 0, 37)
    Scrollingbar.BottomImage = ""
    Scrollingbar.ScrollBarThickness = 0
    Scrollingbar.TopImage = ""

    ScrollingbarUIListLayout.Name = "ScrollingbarUIListLayout"
    ScrollingbarUIListLayout.Parent = Scrollingbar
    ScrollingbarUIListLayout.FillDirection = Enum.FillDirection.Horizontal
    ScrollingbarUIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    ScrollingbarUIListLayout.Padding = UDim.new(0, 5)

    ScrollingbarUIPadding.Name = "ScrollingbarUIPadding"
    ScrollingbarUIPadding.Parent = Scrollingbar
    ScrollingbarUIPadding.PaddingLeft = UDim.new(0, 5)
    ScrollingbarUIPadding.PaddingTop = UDim.new(0, 5)

    local LibraryTab = {}

    function LibraryTab.create(Title)
        PageOrders = PageOrders + 1

        local name = tostring(Title) or tostring(math.random(500,100000))

        local ButtonBar = Instance.new("TextButton")
        local ButtonBarUICorner = Instance.new("UICorner")

        ButtonBar.Name = name.."_ButtonBar"
        ButtonBar.Parent = Scrollingbar
        ButtonBar.BackgroundColor3 = Color3.fromRGB(34, 34, 34)
        ButtonBar.BorderSizePixel = 0
        ButtonBar.BackgroundTransparency = 0.65
        ButtonBar.Font = Enum.Font.GothamMedium
        ButtonBar.TextColor3 = Color3.fromRGB(255, 255, 255)
        ButtonBar.TextSize = 12.000
        ButtonBar.Text = tostring(Title)
        ButtonBar.TextTransparency = 0.500
        ButtonBar.AutoButtonColor = false

        if ButtonBar.Name == name.."_ButtonBar" then
            ButtonBar.Size = UDim2.new(0, 70 + ButtonBar.TextBounds.X, 0, 25)
        end

        ButtonBarUICorner.CornerRadius = UDim.new(0, 4)
        ButtonBarUICorner.Name = "ButtonBarUICorner"
        ButtonBarUICorner.Parent = ButtonBar


        local MainPage = Instance.new("Frame")
        MainPage.Name = name.."_MainPage"
        MainPage.Parent = FolderPage
        MainPage.Active = true
        MainPage.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        MainPage.BackgroundTransparency = 1.000
        MainPage.Size = UDim2.new(0, 520, 0, 545)

        MainPage.LayoutOrder = PageOrders

        local ScrollingMainPage = Instance.new("ScrollingFrame")
        local ScrollingMainPageUIListLayout = Instance.new("UIListLayout")
        local ScrollingMainPageUIPadding = Instance.new("UIPadding")

        ScrollingMainPage.Name = "ScrollingMainPage"
        ScrollingMainPage.Parent = MainPage
        ScrollingMainPage.Active = true
        ScrollingMainPage.AnchorPoint = Vector2.new(0.5, 0.5)
        ScrollingMainPage.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        ScrollingMainPage.BackgroundTransparency = 1.000
        ScrollingMainPage.BorderSizePixel = 0
        ScrollingMainPage.Position = UDim2.new(0.5, 0, 0.5, 0)
        ScrollingMainPage.Size = UDim2.new(0, 510, 0, 535)
        ScrollingMainPage.BottomImage = ""
        ScrollingMainPage.ScrollBarThickness = 3
        ScrollingMainPage.TopImage = ""

        ScrollingMainPageUIListLayout.Name = "ScrollingMainPageUIListLayout"
        ScrollingMainPageUIListLayout.Parent = ScrollingMainPage
        ScrollingMainPageUIListLayout.FillDirection = Enum.FillDirection.Horizontal
        ScrollingMainPageUIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        ScrollingMainPageUIListLayout.Padding = UDim.new(0, 5)

        ScrollingMainPageUIPadding.Name = "ScrollingMainPageUIPadding"
        ScrollingMainPageUIPadding.Parent = ScrollingMainPage
        ScrollingMainPageUIPadding.PaddingLeft = UDim.new(0, 5)
        ScrollingMainPageUIPadding.PaddingTop = UDim.new(0, 5)

        local LeftFrame = Instance.new("Frame")
        local LeftFrameUIPadding = Instance.new("UIPadding")
        local LeftFrameUIListLayout = Instance.new("UIListLayout")

        local RightFrame = Instance.new("Frame")
        local RightFrameUIPadding = Instance.new("UIPadding")
        local RightFrameUIListLayout = Instance.new("UIListLayout")

        LeftFrame.Name = "LeftFrame"
        LeftFrame.Parent = ScrollingMainPage
        LeftFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        LeftFrame.BackgroundTransparency = 1.000
        LeftFrame.Size = UDim2.new(0, 245, 0, 524)

        LeftFrameUIPadding.Name = "LeftFrameUIPadding"
        LeftFrameUIPadding.Parent = LeftFrame
        LeftFrameUIPadding.PaddingLeft = UDim.new(0, 5)
        LeftFrameUIPadding.PaddingTop = UDim.new(0, 5)

        LeftFrameUIListLayout.Name = "LeftFrameUIListLayout"
        LeftFrameUIListLayout.Parent = LeftFrame
        LeftFrameUIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        LeftFrameUIListLayout.Padding = UDim.new(0, 15)

        RightFrame.Name = "RightFrame"
        RightFrame.Parent = ScrollingMainPage
        RightFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        RightFrame.BackgroundTransparency = 1.000
        RightFrame.Size = UDim2.new(0, 245, 0, 524)

        RightFrameUIPadding.Name = "RightFrameUIPadding"
        RightFrameUIPadding.Parent = RightFrame
        RightFrameUIPadding.PaddingLeft = UDim.new(0, 5)
        RightFrameUIPadding.PaddingTop = UDim.new(0, 5)

        RightFrameUIListLayout.Name = "RightFrameUIListLayout"
        RightFrameUIListLayout.Parent = RightFrame
        RightFrameUIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        RightFrameUIListLayout.Padding = UDim.new(0, 15)

        LeftFrameUIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            LeftFrame.Size = UDim2.new(0, 245, 0, LeftFrameUIListLayout.AbsoluteContentSize.Y + 35)
        end)

        RightFrameUIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            RightFrame.Size = UDim2.new(0, 245, 0, RightFrameUIListLayout.AbsoluteContentSize.Y + 35)
        end)

        local function GetType(value)
            if value == 1 then
                return LeftFrame
            elseif value == 2 then
                return RightFrame
            else
                return LeftFrame
            end
        end

        LeftFrameUIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            if LeftFrameUIListLayout.AbsoluteContentSize.Y > RightFrameUIListLayout.AbsoluteContentSize.Y then
                ScrollingMainPage.CanvasSize = UDim2.new(0, 0, 0, LeftFrameUIListLayout.AbsoluteContentSize.Y +35)
            end
        end)
        RightFrameUIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            if RightFrameUIListLayout.AbsoluteContentSize.Y > LeftFrameUIListLayout.AbsoluteContentSize.Y then
                ScrollingMainPage.CanvasSize = UDim2.new(0, 0, 0, RightFrameUIListLayout.AbsoluteContentSize.Y +35)
            end
        end)

        ButtonBar.MouseButton1Click:connect(function()
            if MainPage.Name == name.."_MainPage" then
                FolderUIPageLayout:JumpToIndex(MainPage.LayoutOrder)
                for i ,v in next , Scrollingbar:GetChildren() do
                    if v:IsA("TextButton") then
                        TweenService:Create(
                            v,
                            TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                            {TextTransparency = 0.5}
                        ):Play()
                        TweenService:Create(
                            v,
                            TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                            {BackgroundTransparency = 0.65}
                        ):Play()
                    end
                end
                TweenService:Create(
                    ButtonBar,
                    TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                    {TextTransparency = 0}
                ):Play()
                TweenService:Create(
                    ButtonBar,
                    TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                    {BackgroundTransparency = 0}
                ):Play()
            end
        end)

        if FocusUI == false then
            TweenService:Create(
                ButtonBar,
                TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {TextTransparency = 0}
            ):Play()
            TweenService:Create(
                ButtonBar,
                TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {BackgroundTransparency = 0}
            ):Play()
            MainPage.Visible = true
            MainPage.Name  = name.."_MainPage"
            FocusUI  = true
        end

        local LibraryPage = {}

        function LibraryPage.Page(Type)
            local PageFrame = Instance.new("Frame")
            local PageFrameUICorner = Instance.new("UICorner")
            local Line = Instance.new("Frame")
            local PageFrameMain = Instance.new("Frame")
            local PageFrameMainUICorner = Instance.new("UICorner")
            local PageFrameMainUIListLayout = Instance.new("UIListLayout")
            local PageFrameMainUIPadding = Instance.new("UIPadding")

            PageFrame.Name = "PageFrame"
            PageFrame.Parent = GetType(Type)
            PageFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
            PageFrame.BorderSizePixel = 0
            PageFrame.Size = UDim2.new(0, 235, 0, 100)

            PageFrameUICorner.CornerRadius = UDim.new(0, 4)
            PageFrameUICorner.Name = "PageFrameUICorner"
            PageFrameUICorner.Parent = PageFrame

            Line.Name = "Line"
            Line.Parent = PageFrame
            Line.Active = true
            Line.BackgroundColor3 = getgenv().Settings.Color
            Line.BorderSizePixel = 0
            Line.Size = UDim2.new(0, 235, 0, 1)
            Line.ZIndex = 2

            PageFrameMain.Name = "PageFrameMain"
            PageFrameMain.Parent = PageFrame
            PageFrameMain.BackgroundColor3 = Color3.fromRGB(22, 22, 22)
            PageFrameMain.BorderSizePixel = 0
            PageFrameMain.Position = UDim2.new(0, 0, 0, 0)
            PageFrameMain.Size = UDim2.new(0, 235, 0, 98)

            PageFrameMainUICorner.CornerRadius = UDim.new(0, 4)
            PageFrameMainUICorner.Name = "PageFrameMainUICorner"
            PageFrameMainUICorner.Parent = PageFrameMain

            PageFrameMainUIListLayout.Name = "PageFrameMainUIListLayout"
            PageFrameMainUIListLayout.Parent = PageFrameMain
            PageFrameMainUIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
            PageFrameMainUIListLayout.Padding = UDim.new(0, 5)

            PageFrameMainUIPadding.Name = "PageFrameMainUIPadding"
            PageFrameMainUIPadding.Parent = PageFrameMain
            PageFrameMainUIPadding.PaddingLeft = UDim.new(0, 5)
            PageFrameMainUIPadding.PaddingTop = UDim.new(0, 5)

            game:GetService("RunService").Stepped:Connect(function ()
                pcall(function ()
                    Scrollingbar.CanvasSize = UDim2.new(0,ScrollingbarUIListLayout.AbsoluteContentSize.X + 10,0,0)
                    PageFrameMain.Size =  UDim2.new(0, 235, 0,PageFrameMainUIListLayout.AbsoluteContentSize.Y + 15)
                    PageFrame.Size =  UDim2.new(0, 235, 0,PageFrameMainUIListLayout.AbsoluteContentSize.Y + 15)
                end)
            end)




            local LibraryFunction = {}

            function LibraryFunction.Label(options)

                local visual = options.Title

                local LabelFrame = Instance.new("Frame")
                local Label = Instance.new("TextLabel")

                LabelFrame.Name = "LabelFrame"
                LabelFrame.Parent = PageFrameMain
                LabelFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                LabelFrame.BackgroundTransparency = 1.000
                LabelFrame.Size = UDim2.new(0, 225, 0, 25)

                Label.Name = "Label"
                Label.Parent = LabelFrame
                Label.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Label.BackgroundTransparency = 1.000
                Label.Size = UDim2.new(0, 225, 0, 25)
                Label.Font = Enum.Font.GothamBold
                Label.TextColor3 = Color3.fromRGB(255, 255, 255)
                Label.TextSize = 12.000
                Label.TextWrapped = true
                Label.TextTransparency = 0.500
                Label.Text = visual or ""

                LabelFrame.MouseEnter:Connect(function()
                    TweenService:Create(
                        Label,
                        TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                        {TextTransparency = 0}
                    ):Play()
                end)
        
                LabelFrame.MouseLeave:Connect(function()
                    TweenService:Create(
                        Label,
                        TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                        {TextTransparency = 0.5}
                    ):Play()
                end)

                local LabelFunction = {}

                function LabelFunction.UpdateColor(value)
                    TweenService:Create(
                        Label,
                        TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out),
                        {TextColor3 = value}
                    ):Play()
                end

                function LabelFunction.Update(value)
                    Label.Text = tostring(value)
                end
                return LabelFunction
            end

            function LibraryFunction.Toggle(options)

                local visualTitle = options.Title or "Toggle"
                local visualdefault = options.Default or false
                local visualcallback = options.callback or function() end


                local ToggleFrame = Instance.new("Frame")
                local ToggleFrameUICorner = Instance.new("UICorner")
                local ToggleTitle = Instance.new("TextLabel")
                local Toggle = Instance.new("ImageButton")
                local ToggleUICorner = Instance.new("UICorner")
                local ToggleInner = Instance.new("ImageButton")
                local ToggleInnerUICorner = Instance.new("UICorner")
                local ToggleButton = Instance.new("TextButton")

                ToggleFrame.Name = "ToggleFrame"
                ToggleFrame.Parent = PageFrameMain
                ToggleFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
                ToggleFrame.BorderColor3 = Color3.fromRGB(27, 42, 53)
                ToggleFrame.BorderSizePixel = 0
                ToggleFrame.Size = UDim2.new(0, 225, 0, 29)

                ToggleFrameUICorner.CornerRadius = UDim.new(0, 4)
                ToggleFrameUICorner.Name = "ToggleFrameUICorner"
                ToggleFrameUICorner.Parent = ToggleFrame

                ToggleTitle.Name = "ToggleTitle"
                ToggleTitle.Parent = ToggleFrame
                ToggleTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                ToggleTitle.BackgroundTransparency = 1.000
                ToggleTitle.Position = UDim2.new(0.0488888882, 0, 0, 0)
                ToggleTitle.Size = UDim2.new(0, 170, 0, 29)
                ToggleTitle.Font = Enum.Font.GothamBold
                ToggleTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
                ToggleTitle.TextSize = 12.000
                ToggleTitle.Text = visualTitle
                ToggleTitle.TextTransparency = 0.500
                ToggleTitle.TextWrapped = true
                ToggleTitle.TextXAlignment = Enum.TextXAlignment.Left

                Toggle.Name = "Toggle"
                Toggle.Parent = ToggleTitle
                Toggle.AnchorPoint = Vector2.new(0.5, 0.5)
                Toggle.BackgroundColor3 = Color3.fromRGB(21, 21, 21)
                Toggle.BackgroundTransparency = 1.000
                Toggle.Position = UDim2.new(1.14999998, 0, 0.5, 0)
                Toggle.Size = UDim2.new(0, 25, 0, 25)
                Toggle.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"
                Toggle.ImageColor3 = Color3.fromRGB(22, 22, 22)

                ToggleUICorner.CornerRadius = UDim.new(0, 30)
                ToggleUICorner.Name = "ToggleUICorner"
                ToggleUICorner.Parent = Toggle

                ToggleInner.Name = "ToggleInner"
                ToggleInner.Parent = Toggle
                ToggleInner.AnchorPoint = Vector2.new(0.5, 0.5)
                ToggleInner.BackgroundColor3 = Color3.fromRGB(21, 21, 21)
                ToggleInner.BackgroundTransparency = 1.000
                ToggleInner.Position = UDim2.new(0.50910, 0,0.51010, 0)
                ToggleInner.Size = UDim2.new(0, 0, 0, 0)
                ToggleInner.Image = "http://www.roblox.com/asset/?id=6023426945"
                ToggleInner.ImageColor3 = getgenv().Settings.Color

                ToggleInnerUICorner.CornerRadius = UDim.new(0, 30)
                ToggleInnerUICorner.Name = "ToggleInnerUICorner"
                ToggleInnerUICorner.Parent = ToggleInner

                ToggleButton.Name = "ToggleButton"
                ToggleButton.Parent = ToggleFrame
                ToggleButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                ToggleButton.BackgroundTransparency = 1.000
                ToggleButton.Size = UDim2.new(0, 225, 0, 29)
                ToggleButton.AutoButtonColor = false
                ToggleButton.Font = Enum.Font.SourceSans
                ToggleButton.Text = ""
                ToggleButton.TextColor3 = Color3.fromRGB(0, 0, 0)
                ToggleButton.TextSize = 14.000
                ToggleButton.ClipsDescendants = true

                local visual = {toggle = false , lock = true , togglefunction ={

                },}

                ToggleFrame.MouseEnter:Connect(function()
                    TweenService:Create(
                        ToggleTitle,
                        TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                        {TextTransparency = 0}
                    ):Play()
                    
                end)
                ToggleFrame.MouseLeave:Connect(function()
                    TweenService:Create(
                        ToggleTitle,
                        TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                        {TextTransparency = 0.5}
                    ):Play()
                end)

                ToggleButton.MouseButton1Down:Connect(function()
                    if visual.toggle == false and visual.lock == true then
                        TweenService:Create(
                            ToggleInner,
                            TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                            {Size = UDim2.new(0, 22, 0, 22)}
                        ):Play()
                    elseif visual.lock == true then
                        TweenService:Create(
                            ToggleInner,
                            TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                            {Size = UDim2.new(0, 0, 0, 0)}
                        ):Play()
                    end
                    if  visual.lock == true  then
                        visual.toggle = not visual.toggle
                        options.callback(visual.toggle)
                    end
                end)

                if visualdefault == true then
                    TweenService:Create(
                        ToggleInner,
                        TweenInfo.new(0.2, Enum.EasingStyle.Back, Enum.EasingDirection.Out),
                        {Size = UDim2.new(0, 15, 0, 15)}
                    ):Play()
                    if  visual.lock == true  then
                        ToggleTitle.TextTransparency = 0.500
                        visual.toggle = not visual.toggle
                        options.callback(visual.toggle)
                    end
                end

                local LockerFrame = Instance.new("Frame")
                local LockIcon = Instance.new("ImageLabel")

                LockerFrame.Name = "LockerFrame"
                LockerFrame.Parent = ToggleFrame
                LockerFrame.Active = true
                LockerFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                LockerFrame.BackgroundTransparency = 0.200
                LockerFrame.BorderSizePixel = 0
                LockerFrame.ClipsDescendants = true
                LockerFrame.Position = UDim2.new(-0.0022222228, 0, 0, 0)
                LockerFrame.Size = UDim2.new(0, 225, 0, 29)
                LockerFrame.BackgroundTransparency = 1

                LockIcon.Name = "LockIcon"
                LockIcon.Parent = LockerFrame
                LockIcon.AnchorPoint = Vector2.new(0.5, 0.5)
                LockIcon.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                LockIcon.BackgroundTransparency = 1.000
                LockIcon.Position = UDim2.new(0.5, 0, 0.5, 0)
                LockIcon.Size = UDim2.new(0, 0, 0, 0)
                LockIcon.Image = "http://www.roblox.com/asset/?id=3926305904"
                LockIcon.ImageRectOffset = Vector2.new(404, 364)
                LockIcon.ImageRectSize = Vector2.new(36, 36)
                LockIcon.ImageColor3 = Color3.fromRGB(255,25,25)


                function visual.togglefunction.lock()
                    visual.lock = false
                    TweenService:Create(
                        LockerFrame,
                        TweenInfo.new(.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out,0.1),
                        {BackgroundTransparency = 0.5}
                    ):Play()
                    wait()
                    TweenService:Create(
                        LockIcon,
                        TweenInfo.new(.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out,0.1),
                        {Size = UDim2.new(0, 25, 0, 25)}
                    ):Play()
                end
                function visual.togglefunction.unlock()
                    visual.lock = true
                    TweenService:Create(
                        LockerFrame,
                        TweenInfo.new(.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out,0.1),
                        {BackgroundTransparency = 1}
                    ):Play()
                    wait()
                    TweenService:Create(
                        LockIcon,
                        TweenInfo.new(.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out,0.1),
                        {Size = UDim2.new(0, 0, 0, 0)}
                    ):Play()
                end
                return visual.togglefunction
            end

            function LibraryFunction.Button(options)
                local visualTitle = options.Title or "Button"
                local visualcallback = options.callback or function() end
                local visualdefault = options.Default or false

                local ButtonFrame = Instance.new("Frame")
                local Button = Instance.new("TextButton")
                local ButtonCorner = Instance.new("UICorner")

                ButtonFrame.Name = "ButtonFrame"
                ButtonFrame.Parent = PageFrameMain
                ButtonFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                ButtonFrame.BackgroundTransparency = 1.000
                ButtonFrame.Size = UDim2.new(0, 225, 0, 22)

                Button.Name = "Button"
                Button.Parent = ButtonFrame
                Button.BackgroundColor3 = getgenv().Settings.Color
                Button.BackgroundTransparency = 0.500
                Button.Size = UDim2.new(0, 225, 0, 22)
                Button.Font = Enum.Font.GothamBold
                Button.TextColor3 = Color3.fromRGB(255, 255, 255)
                Button.TextSize = 12.000
                Button.TextTransparency = 0.500
                Button.Text = visualTitle
                Button.TextWrapped = true
                Button.ClipsDescendants = true
                Button.AutoButtonColor = false

                ButtonCorner.CornerRadius = UDim.new(0, 4)
                ButtonCorner.Name = "ButtonCorner"
                ButtonCorner.Parent = Button

                Button.MouseEnter:Connect(function()
                    TweenService:Create(
                        Button,
                        TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                        {TextTransparency = 0}
                    ):Play()
                    TweenService:Create(
                        Button,
                        TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                        {BackgroundTransparency = 0}
                    ):Play()
                end)

                Button.MouseLeave:Connect(function()
                    TweenService:Create(
                        Button,
                        TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                        {TextTransparency = 0.5}
                    ):Play()
                    TweenService:Create(
                        Button,
                        TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                        {BackgroundTransparency = 0.5}
                    ):Play()

                end)

                Button.MouseButton1Down:Connect(function()
                    CircleAnim(Button,Color3.fromRGB(255, 255, 255),Color3.fromRGB(255, 255, 255))
                    pcall(options.callback)
                    Button.TextSize = 0.000
                    TweenService:Create(
                        Button,
                        TweenInfo.new(0.4,Enum.EasingStyle.Back,Enum.EasingDirection.Out),
                        {TextSize = 12}
                    ):Play()
                end)

                
            end



            function LibraryFunction.Dropdown(options)

                local DropdownFunctions = false
                local visualTitle = options.Title or "Dropdown : nil"
                local visualItem = options.Item or {}
                local visualcallback = options.callback or function(Item) return end 

                local DropdownFrame = Instance.new("Frame")
                local DropdownFrameUICorner = Instance.new("UICorner")
                local DropdownTitle = Instance.new("TextLabel")
                local Arrow = Instance.new("ImageLabel")
                local DropdownButton = Instance.new("TextButton")

                DropdownFrame.Name = "DropdownFrame"
                DropdownFrame.Parent = PageFrameMain
                DropdownFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
                DropdownFrame.BorderColor3 = Color3.fromRGB(27, 42, 53)
                DropdownFrame.BorderSizePixel = 0
                DropdownFrame.Position = UDim2.new(0, 0, 0.392857134, 0)
                DropdownFrame.Size = UDim2.new(0, 225, 0, 30)

                DropdownFrameUICorner.CornerRadius = UDim.new(0, 4)
                DropdownFrameUICorner.Name = "DropdownFrameUICorner"
                DropdownFrameUICorner.Parent = DropdownFrame

                DropdownTitle.Name = "DropdownTitle"
                DropdownTitle.Parent = DropdownFrame
                DropdownTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                DropdownTitle.BackgroundTransparency = 1.000
                DropdownTitle.Position = UDim2.new(0.0488888882, 0, 0, 0)
                DropdownTitle.Size = UDim2.new(0, 170, 0, 29)
                DropdownTitle.Font = Enum.Font.GothamBold
                DropdownTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
                DropdownTitle.TextSize = 12.000
                DropdownTitle.Text = visualTitle.." : "
                DropdownTitle.TextTransparency = 0.500
                DropdownTitle.TextWrapped = true
                DropdownTitle.TextXAlignment = Enum.TextXAlignment.Left

                Arrow.Name = "Arrow"
                Arrow.Parent = DropdownTitle
                Arrow.AnchorPoint = Vector2.new(0.5, 0.5)
                Arrow.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Arrow.BackgroundTransparency = 1.000
                Arrow.Position = UDim2.new(1.14999998, 0, 0.5, 0)
                Arrow.Size = UDim2.new(0, 20, 0, 20)
                Arrow.Image = "http://www.roblox.com/asset/?id=6031090990"
                Arrow.ImageTransparency = 0.500


                DropdownButton.Name = "DropdownButton"
                DropdownButton.Parent = DropdownFrame
                DropdownButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                DropdownButton.BackgroundTransparency = 1.000
                DropdownButton.Size = UDim2.new(0, 225, 0, 29)
                DropdownButton.AutoButtonColor = false
                DropdownButton.Font = Enum.Font.SourceSans
                DropdownButton.Text = ""
                DropdownButton.TextColor3 = Color3.fromRGB(0, 0, 0)
                DropdownButton.TextSize = 14.000

                local SelectionFrame = Instance.new("Frame")
                local SelectionScrolling = Instance.new("ScrollingFrame")
                local SelectionScrollingUIListLayout = Instance.new("UIListLayout")
                local SelectionScrollingUIPadding = Instance.new("UIPadding")

                SelectionFrame.Name = "SelectionFrame"
                SelectionFrame.Parent = PageFrameMain
                SelectionFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
                SelectionFrame.BorderColor3 = Color3.fromRGB(27, 42, 53)
                SelectionFrame.BorderSizePixel = 0
                SelectionFrame.Position = UDim2.new(0, 0, 0.497023821, 0)
                SelectionFrame.Size = UDim2.new(0, 225, 0, 0)
                SelectionFrame.ClipsDescendants = true


                local SelectionFrameUICorner = Instance.new("UICorner")
                SelectionFrameUICorner.CornerRadius = UDim.new(0, 4)
                SelectionFrameUICorner.Name = "SelectionFrameUICorner"
                SelectionFrameUICorner.Parent = SelectionFrame



                SelectionScrolling.Name = "SelectionScrolling"
                SelectionScrolling.Parent = SelectionFrame
                SelectionScrolling.Active = true
                SelectionScrolling.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                SelectionScrolling.BackgroundTransparency = 1.000
                SelectionScrolling.BorderSizePixel = 0
                SelectionScrolling.Position = UDim2.new(0, 0, 0, 0)
                SelectionScrolling.Size = UDim2.new(0, 215, 0, 75)
                SelectionScrolling.BottomImage = ""
                SelectionScrolling.ScrollBarThickness = 2
                SelectionScrolling.TopImage = ""

                SelectionScrollingUIListLayout.Name = "SelectionScrollingUIListLayout"
                SelectionScrollingUIListLayout.Parent = SelectionScrolling
                SelectionScrollingUIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                SelectionScrollingUIListLayout.Padding = UDim.new(0, 5)

                SelectionScrollingUIPadding.Name = "SelectionScrollingUIPadding"
                SelectionScrollingUIPadding.Parent = SelectionScrolling
                SelectionScrollingUIPadding.PaddingLeft = UDim.new(0, 5)
                SelectionScrollingUIPadding.PaddingTop = UDim.new(0, 5)

                for i,v in pairs(visualItem) do

                    local ButtonBar = Instance.new("TextButton")
                    local ButtonBarUICorner = Instance.new("UICorner")

                    ButtonBar.Name = "ButtonBar"
                    ButtonBar.Parent = SelectionScrolling
                    ButtonBar.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                    ButtonBar.BorderSizePixel = 0
                    ButtonBar.Size = UDim2.new(0, 204, 0, 18)
                    ButtonBar.Font = Enum.Font.GothamBold
                    ButtonBar.TextColor3 = Color3.fromRGB(255, 255, 255)
                    ButtonBar.TextSize = 12.000
                    ButtonBar.Text = tostring(v)
                    ButtonBar.TextTransparency = 0.500
                    ButtonBar.BackgroundTransparency = 0.5
                    ButtonBar.TextWrapped = true
                    ButtonBar.AutoButtonColor = false
                    ButtonBar.ClipsDescendants = true


                    ButtonBarUICorner.CornerRadius = UDim.new(0, 4)
                    ButtonBarUICorner.Name = "ButtonBarUICorner"
                    ButtonBarUICorner.Parent = ButtonBar

                    ButtonBar.MouseEnter:Connect(function()
                        TweenService:Create(
                            ButtonBar,
                            TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                            {BackgroundTransparency = 0}
                        ):Play()
                        TweenService:Create(
                            ButtonBar,
                            TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                            {TextTransparency = 0}
                        ):Play()
                    end)

                    ButtonBar.MouseLeave:Connect(function()
                        TweenService:Create(
                            ButtonBar,
                            TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                            {BackgroundTransparency = 0.5}
                        ):Play()
                        TweenService:Create(
                            ButtonBar,
                            TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                            {TextTransparency = 0.5}
                        ):Play()
                    end)

                    ButtonBar.MouseButton1Down:Connect(function()
                        ButtonBar.TextSize = 0
                        TweenService:Create(
                            ButtonBar,
                            TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                            {TextSize = 12}
                        ):Play()
                        DropdownTitle.Text = tostring(visualTitle.." : "..v)
                        CircleAnim(ButtonBar,Color3.fromRGB(255,255,255),Color3.fromRGB(255,255,255))
                        options.callback(v)
                    end)
                end
                DropdownButton.MouseEnter:Connect(function()

                    TweenService:Create(
                        Arrow,
                        TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                        {ImageTransparency = 0}
                    ):Play()
                    TweenService:Create(
                        DropdownTitle,
                        TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                        {TextTransparency = 0}
                    ):Play()
                end)

                DropdownButton.MouseLeave:Connect(function()

                    TweenService:Create(
                        Arrow,
                        TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                        {ImageTransparency = 0.5}
                    ):Play()

                    TweenService:Create(
                        DropdownTitle,
                        TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                        {TextTransparency = 0.5}
                    ):Play()
                end)


                DropdownButton.MouseButton1Down:Connect(function()
                    if DropdownFunctions == false  then
                        TweenService:Create(
                            SelectionFrame,
                            TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                            {Size = UDim2.new(0, 225, 0, 80)}
                        ):Play()
                        TweenService:Create(
                            Arrow,
                            TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                            {Rotation = 180}
                        ):Play()
                        TweenService:Create(
                            Arrow,
                            TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                            {ImageTransparency = 0}
                        ):Play()
                    else
                        TweenService:Create(
                            SelectionFrame,
                            TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                            {Size = UDim2.new(0, 225, 0, 0)}
                        ):Play()
                        TweenService:Create(
                            Arrow,
                            TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                            {Rotation = 0}
                        ):Play()
                        TweenService:Create(
                            Arrow,
                            TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                            {ImageTransparency = 0.5}
                        ):Play()
                    end
                    SelectionScrolling.CanvasSize = UDim2.new(0,0,0,SelectionScrollingUIListLayout.AbsoluteContentSize.Y + 10)
                    DropdownFunctions = not DropdownFunctions
                end)

                local DropdownVisual = {}

                function DropdownVisual.Clear()
                    TweenService:Create(
                        SelectionFrame,
                        TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                        {Size = UDim2.new(0, 225, 0, 0)}
                    ):Play()
                    DropdownFunctions = not DropdownFunctions
                    DropdownTitle.Text = tostring(visualTitle.." : ")
                    for i, v in next, SelectionScrolling:GetChildren() do
                        if v:IsA("TextButton") then
                            v:Destroy()
                        end
                    end
                end

                function DropdownVisual.Add(value)

                    local ButtonBar = Instance.new("TextButton")
                    local ButtonBarUICorner = Instance.new("UICorner")

                    ButtonBar.Name = "ButtonBar"
                    ButtonBar.Parent = SelectionScrolling
                    ButtonBar.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                    ButtonBar.BorderSizePixel = 0
                    ButtonBar.Size = UDim2.new(0, 204, 0, 18)
                    ButtonBar.Font = Enum.Font.GothamBold
                    ButtonBar.TextColor3 = Color3.fromRGB(255, 255, 255)
                    ButtonBar.TextSize = 12.000
                    ButtonBar.Text = tostring(value)
                    ButtonBar.TextTransparency = 0.500
                    ButtonBar.BackgroundTransparency = 0.5
                    ButtonBar.TextWrapped = true
                    ButtonBar.AutoButtonColor = false
                    ButtonBar.ClipsDescendants = true


                    ButtonBarUICorner.CornerRadius = UDim.new(0, 4)
                    ButtonBarUICorner.Name = "ButtonBarUICorner"
                    ButtonBarUICorner.Parent = ButtonBar

                    ButtonBar.MouseEnter:Connect(function()
                        TweenService:Create(
                            ButtonBar,
                            TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                            {BackgroundTransparency = 0}
                        ):Play()
                        TweenService:Create(
                            ButtonBar,
                            TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                            {TextTransparency = 0}
                        ):Play()
                    end)

                    ButtonBar.MouseLeave:Connect(function()
                        TweenService:Create(
                            ButtonBar,
                            TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                            {BackgroundTransparency = 0.5}
                        ):Play()
                        TweenService:Create(
                            ButtonBar,
                            TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                            {TextTransparency = 0.5}
                        ):Play()
                    end)

                    ButtonBar.MouseButton1Down:Connect(function()
                        ButtonBar.TextSize = 0
                        TweenService:Create(
                            ButtonBar,
                            TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                            {TextSize = 12}
                        ):Play()
                        DropdownTitle.Text = tostring(visualTitle.." : "..value)
                        CircleAnim(ButtonBar,Color3.fromRGB(255,255,255),Color3.fromRGB(255,255,255))
                        options.callback(value)
                    end)
                    SelectionScrolling.CanvasSize = UDim2.new(0,0,0,SelectionScrollingUIListLayout.AbsoluteContentSize.Y + 10)
                end

                return DropdownVisual
            end

            function LibraryFunction.MultiDropdown(options)
                local DropdownFunctions = false
                local MultiDropdown = {}
                local visualTitle = options.Title or "Dropdown : nil"
                local visualItem = options.Item or {}
                local visualcallback = options.callback or function(Item) return end
                local visualdefault = options.Default or {}

                local DropdownFrame = Instance.new("Frame")
                local DropdownFrameUICorner = Instance.new("UICorner")
                local DropdownTitle = Instance.new("TextLabel")
                local Arrow = Instance.new("ImageLabel")
                local DropdownButton = Instance.new("TextButton")

                DropdownFrame.Name = "DropdownFrame"
                DropdownFrame.Parent = PageFrameMain
                DropdownFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
                DropdownFrame.BorderColor3 = Color3.fromRGB(27, 42, 53)
                DropdownFrame.BorderSizePixel = 0
                DropdownFrame.Position = UDim2.new(0, 0, 0.392857134, 0)
                DropdownFrame.Size = UDim2.new(0, 225, 0, 30)

                DropdownFrameUICorner.CornerRadius = UDim.new(0, 4)
                DropdownFrameUICorner.Name = "DropdownFrameUICorner"
                DropdownFrameUICorner.Parent = DropdownFrame

                DropdownTitle.Name = "DropdownTitle"
                DropdownTitle.Parent = DropdownFrame
                DropdownTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                DropdownTitle.BackgroundTransparency = 1.000
                DropdownTitle.Position = UDim2.new(0.0488888882, 0, 0, 0)
                DropdownTitle.Size = UDim2.new(0, 170, 0, 29)
                DropdownTitle.Font = Enum.Font.GothamBold
                DropdownTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
                DropdownTitle.TextSize = 12.000
                DropdownTitle.Text = visualTitle.." : "
                DropdownTitle.TextTransparency = 0.500
                DropdownTitle.TextWrapped = true
                DropdownTitle.TextXAlignment = Enum.TextXAlignment.Left

                Arrow.Name = "Arrow"
                Arrow.Parent = DropdownTitle
                Arrow.AnchorPoint = Vector2.new(0.5, 0.5)
                Arrow.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                Arrow.BackgroundTransparency = 1.000
                Arrow.Position = UDim2.new(1.14999998, 0, 0.5, 0)
                Arrow.Size = UDim2.new(0, 20, 0, 20)
                Arrow.Image = "http://www.roblox.com/asset/?id=6031090990"
                Arrow.ImageTransparency = 0.500

                DropdownButton.Name = "DropdownButton"
                DropdownButton.Parent = DropdownFrame
                DropdownButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                DropdownButton.BackgroundTransparency = 1.000
                DropdownButton.Size = UDim2.new(0, 225, 0, 29)
                DropdownButton.AutoButtonColor = false
                DropdownButton.Font = Enum.Font.SourceSans
                DropdownButton.Text = ""
                DropdownButton.TextColor3 = Color3.fromRGB(0, 0, 0)
                DropdownButton.TextSize = 14.000

                local SelectionMultiFrame = Instance.new("Frame")
                local SelectionFrameUICorner = Instance.new("UICorner")

                local SearchBar = Instance.new("TextBox")
                local SelectionScrolling = Instance.new("ScrollingFrame")
                local SelectionScrollingUIListLayout = Instance.new("UIListLayout")
                local SelectionScrollingUIPadding = Instance.new("UIPadding")

                SelectionMultiFrame.Name = "SelectionMultiFrame"
                SelectionMultiFrame.Parent = PageFrameMain
                SelectionMultiFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
                SelectionMultiFrame.BorderColor3 = Color3.fromRGB(27, 42, 53)
                SelectionMultiFrame.BorderSizePixel = 0
                SelectionMultiFrame.Position = UDim2.new(0, 0, 0.497023821, 0)
                SelectionMultiFrame.Size = UDim2.new(0, 225, 0, 0)
                SelectionMultiFrame.ClipsDescendants = true

                SelectionFrameUICorner.CornerRadius = UDim.new(0, 4)
                SelectionFrameUICorner.Name = "SelectionFrameUICorner"
                SelectionFrameUICorner.Parent = SelectionMultiFrame




                SelectionScrolling.Name = "SelectionScrolling"
                SelectionScrolling.Parent = SelectionMultiFrame
                SelectionScrolling.Active = true
                SelectionScrolling.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                SelectionScrolling.BackgroundTransparency = 1.000
                SelectionScrolling.BorderSizePixel = 0
                SelectionScrolling.Position = UDim2.new(0, 0, 0, 0)
                SelectionScrolling.Size = UDim2.new(0, 215, 0, 75)
                SelectionScrolling.BottomImage = ""
                SelectionScrolling.ScrollBarThickness = 2
                SelectionScrolling.TopImage = ""

                SelectionScrollingUIListLayout.Name = "SelectionScrollingUIListLayout"
                SelectionScrollingUIListLayout.Parent = SelectionScrolling
                SelectionScrollingUIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                SelectionScrollingUIListLayout.Padding = UDim.new(0, 5)

                SelectionScrollingUIPadding.Name = "SelectionScrollingUIPadding"
                SelectionScrollingUIPadding.Parent = SelectionScrolling
                SelectionScrollingUIPadding.PaddingLeft = UDim.new(0, 5)
                SelectionScrollingUIPadding.PaddingTop = UDim.new(0, 5)



                for i,v in pairs(visualItem) do


                    local TextButton = Instance.new("TextButton")
                    local TextButtonUICorner = Instance.new("UICorner")

                    TextButton.Name = "ButtonBar"
                    TextButton.Parent = SelectionScrolling
                    TextButton.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
                    TextButton.BorderSizePixel = 0
                    TextButton.Size = UDim2.new(0, 204, 0, 18)
                    TextButton.Font = Enum.Font.GothamBold
                    TextButton.TextColor3 = Color3.fromRGB(255, 255, 255)
                    TextButton.TextSize = 12.000
                    TextButton.Text = tostring(v)
                    TextButton.TextTransparency = 0.500
                    TextButton.BackgroundTransparency = 0.5
                    TextButton.TextWrapped = true
                    TextButton.AutoButtonColor = false
                    TextButton.ClipsDescendants = true



                    TextButtonUICorner.CornerRadius = UDim.new(0, 4)
                    TextButtonUICorner.Name = "ButtonBarUICorner"
                    TextButtonUICorner.Parent = TextButton


                    



                    for o,p in pairs(visualdefault) do
                        if v == p  then
                            TweenService:Create(
                                TextButton,
                                TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                                {TextTransparency = 0}
                            ):Play()
                            table.insert(MultiDropdown,p)
                            DropdownTitle.Text = tostring(visualTitle.." : "..table.concat(MultiDropdown,","))
                            pcall(visualcallback,MultiDropdown)
                        end
                    end

                    TextButton.MouseEnter:Connect(function()
                        TweenService:Create(
                            TextButton,
                            TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                            {BackgroundTransparency = 0}
                        ):Play()
                    end)

                    TextButton.MouseLeave:Connect(function()
                        TweenService:Create(
                            TextButton,
                            TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                            {BackgroundTransparency = 0.5}
                        ):Play()
                    end)

                    TextButton.MouseButton1Down:Connect(function()
                        if tablefound(MultiDropdown,v) == false then
                            table.insert(MultiDropdown,v)
                            CircleAnim(TextButton,Color3.fromRGB(255, 255, 255),Color3.fromRGB(255, 255, 255))
                            TweenService:Create(
                                TextButton,
                                TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                                {TextTransparency = 0}
                            ):Play()
                        else
                            CircleAnim(TextButton,Color3.fromRGB(255, 255, 255),Color3.fromRGB(255, 255, 255))
                            for ine,va in pairs(MultiDropdown) do
                                if va == v then
                                    table.remove(MultiDropdown,ine)
                                end
                            end
                            TweenService:Create(
                                TextButton,
                                TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                                {TextTransparency = 0.500}
                            ):Play()
                        end
                        pcall(visualcallback,MultiDropdown)
                        DropdownTitle.Text = tostring(visualTitle.." : "..table.concat(MultiDropdown,","))
                    end)
                end
                DropdownButton.MouseEnter:Connect(function()

                    TweenService:Create(
                        Arrow,
                        TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                        {ImageTransparency = 0}
                    ):Play()
                    TweenService:Create(
                        DropdownTitle,
                        TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                        {TextTransparency = 0}
                    ):Play()
                end)

                DropdownButton.MouseLeave:Connect(function()

                    TweenService:Create(
                        Arrow,
                        TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                        {ImageTransparency = 0.5}
                    ):Play()

                    TweenService:Create(
                        DropdownTitle,
                        TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                        {TextTransparency = 0.5}
                    ):Play()
                end)
                DropdownButton.MouseButton1Down:Connect(function()
                    if DropdownFunctions == false  then
                        TweenService:Create(
                            SelectionMultiFrame,
                            TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                            {Size = UDim2.new(0, 225, 0, 80)}
                        ):Play()
                        TweenService:Create(
                            Arrow,
                            TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                            {Rotation = 180}
                        ):Play()
                        TweenService:Create(
                            Arrow,
                            TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                            {ImageTransparency = 0}
                        ):Play()
                    else
                        TweenService:Create(
                            SelectionMultiFrame,
                            TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                            {Size = UDim2.new(0, 225, 0, 0)}
                        ):Play()
                        TweenService:Create(
                            Arrow,
                            TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                            {Rotation = 0}
                        ):Play()
                        TweenService:Create(
                            Arrow,
                            TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                            {ImageTransparency = 0.5}
                        ):Play()
                    end
                    SelectionScrolling.CanvasSize = UDim2.new(0,0,0,SelectionScrollingUIListLayout.AbsoluteContentSize.Y + 10)
                    DropdownFunctions = not DropdownFunctions
                end)
            end

			function LibraryFunction.Slider(options)

				local sliderfunc = {}

				local visualTitle = options.Title or "Slider : nil"
				local visualMax = options.Max or 100
				local visualMin = options.Min or 0
				local visualDefault = options.Default or 50
				local visualcallback = options.callback or function() end

				local SliderFrame = Instance.new("Frame")
				local SliderFrame2 = Instance.new("Frame")
				local SliderFrame2UICorner = Instance.new("UICorner")
				local SliderValueFrame = Instance.new("Frame")
				local SliderValueFrame_2 = Instance.new("Frame")
				local SliderValueFrame_3 = Instance.new("Frame")
				local UICorner_2 = Instance.new("UICorner")
				local UICorner_3 = Instance.new("UICorner")
				local SliderFrameUICorner = Instance.new("UICorner")
				local SliderTitle = Instance.new("TextLabel")

				SliderFrame.Name = "SliderFrame"
				SliderFrame.Parent = PageFrameMain
				SliderFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
				SliderFrame.BorderSizePixel = 0
				SliderFrame.ClipsDescendants = true
				SliderFrame.Position = UDim2.new(0, 0, 0.857142866, 0)
				SliderFrame.Size = UDim2.new(0, 225, 0, 42)

				SliderFrame2.Name = "SliderFrame2"
				SliderFrame2.Parent = SliderFrame
				SliderFrame2.AnchorPoint = Vector2.new(0.5, 0.5)
				SliderFrame2.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
				SliderFrame2.BackgroundTransparency = 1.000
				SliderFrame2.BorderSizePixel = 0
				SliderFrame2.ClipsDescendants = true
				SliderFrame2.Position = UDim2.new(0.503888905, 0, 0.5, 0)
				SliderFrame2.Size = UDim2.new(0, 222, 0, 42)

				SliderFrame2UICorner.CornerRadius = UDim.new(0, 4)
				SliderFrame2UICorner.Name = "SliderFrame2UICorner"
				SliderFrame2UICorner.Parent = SliderFrame2


				SliderValueFrame.Name = "SliderValueFrame"
				SliderValueFrame.Parent = SliderFrame2
				SliderValueFrame.AnchorPoint = Vector2.new(0.5, 0.5)
				SliderValueFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
				SliderValueFrame.BorderSizePixel = 0
				SliderValueFrame.Position = UDim2.new(0.5, 0, 0.769999981, 0)
				SliderValueFrame.Size = UDim2.new(0, 200, 0, 5)

				SliderValueFrame_2.Name = "SliderValueFrame"
				SliderValueFrame_2.Parent = SliderValueFrame
				SliderValueFrame_2.BackgroundColor3 = getgenv().Settings.Color
				SliderValueFrame_2.BorderSizePixel = 0
				SliderValueFrame_2.Size = UDim2.new((visualDefault or 0) / visualMax, 0, 0, 5)

				SliderValueFrame_3.Name = "SliderValueFrame"
				SliderValueFrame_3.Parent = SliderValueFrame
				SliderValueFrame_3.AnchorPoint = Vector2.new(0.5, 0.5)
				SliderValueFrame_3.BackgroundColor3 = getgenv().Settings.Color
				SliderValueFrame_3.BorderSizePixel = 0
				SliderValueFrame_3.ClipsDescendants = true
				SliderValueFrame_3.Position = UDim2.new((visualDefault or 0)/visualMax, 0.5, 0.5,0.5, 0)
				SliderValueFrame_3.Size = UDim2.new(0, 13, 0, 13)

				UICorner_2.CornerRadius = UDim.new(0, 300)
				UICorner_2.Name = ""
				UICorner_2.Parent = SliderValueFrame_3

				UICorner_3.CornerRadius = UDim.new(0, 300)
				UICorner_3.Name = ""
				UICorner_3.Parent = SliderValueFrame_2

				SliderFrameUICorner.CornerRadius = UDim.new(0, 4)
				SliderFrameUICorner.Name = "SliderFrameUICorner"
				SliderFrameUICorner.Parent = SliderFrame

				SliderTitle.Name = "SliderTitle"
				SliderTitle.Parent = SliderFrame
				SliderTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
				SliderTitle.BackgroundTransparency = 1.000
				SliderTitle.Position = UDim2.new(0.034351144, 0, 0, 0)
				SliderTitle.Size = UDim2.new(0, 150, 0, 27)
				SliderTitle.Font = Enum.Font.GothamBold
				SliderTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
				SliderTitle.TextSize = 12.000
				SliderTitle.Text = visualTitle.." : "..tostring(visualDefault and math.floor( (visualDefault / visualMax) * (visualMax - visualMin) + visualMin) or 0)
				SliderTitle.TextWrapped = true
				SliderTitle.TextTransparency = 0.500
				SliderTitle.TextXAlignment = Enum.TextXAlignment.Left
				
                SliderFrame.MouseEnter:Connect(function()
                    TweenService:Create(
                        SliderTitle,
                        TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                        {TextTransparency = 0}
                    ):Play()
                end)

                SliderFrame.MouseLeave:Connect(function()
                    TweenService:Create(
                        SliderTitle,
                        TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out,0.1),
                        {TextTransparency = 0.5}
                    ):Play()
                end)

				local function move(input)
					local pos =
						UDim2.new(
							math.clamp((input.Position.X - SliderValueFrame.AbsolutePosition.X) / SliderValueFrame.AbsoluteSize.X, 0, 1),
							0,
							0.5,
							0
						)
					local pos1 =
						UDim2.new(
							math.clamp((input.Position.X - SliderValueFrame.AbsolutePosition.X) / SliderValueFrame.AbsoluteSize.X, 0, 1),
							0,
							0,
							5
						)

					SliderValueFrame_2:TweenSize(pos1, "Out", "Sine", 0.2, true)
					SliderValueFrame_3:TweenPosition(pos, "Out", "Sine", 0.2, true)
					local value = math.floor(((pos.X.Scale * visualMax) / visualMax) * (visualMax - visualMin) + visualMin)
					SliderTitle.Text = visualTitle.." : "..tostring(value)
					pcall(options.callback, value)
				end

				local dragging = false

				SliderFrame.InputBegan:Connect(
					function(input)
						if input.UserInputType == Enum.UserInputType.MouseButton1 then
							dragging = true

						end
					end
				)
				SliderFrame.InputEnded:Connect(
					function(input)
						if input.UserInputType == Enum.UserInputType.MouseButton1 then
							dragging = false

						end
					end
				)


				SliderValueFrame.InputBegan:Connect(
					function(input)
						if input.UserInputType == Enum.UserInputType.MouseButton1 then
							dragging = true

						end
					end
				)
				SliderValueFrame.InputEnded:Connect(
					function(input)
						if input.UserInputType == Enum.UserInputType.MouseButton1 then
							dragging = false

						end
					end
				)
				game:GetService("UserInputService").InputChanged:Connect(function(input)
					if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
						move(input)
					end
				end)
				function sliderfunc.Update(value)
					SliderValueFrame_2:TweenSize(UDim2.new((value or 0) / visualMax, 0, 0, 5), "Out", "Sine", 0.2, true)
					SliderValueFrame_3:TweenPosition(UDim2.new((value or 0)/visualMax, 0,0.5, 0) , "Out", "Sine", 0.2, true)
                    SliderTitle.Text = visualTitle.." : "..tostring(value)
					pcall(function()
						pcall(options.callback, value)
					end)
				end
				return sliderfunc
			end
			return LibraryFunction
		end
		return LibraryPage
	end
	return LibraryTab
end
